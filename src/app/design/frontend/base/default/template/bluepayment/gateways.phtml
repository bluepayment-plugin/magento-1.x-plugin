<div class="p_method_bluepayment" id="p_method_bluepayment_gateway">
    <?php
        $currency = Mage::getSingleton('checkout/session')->getQuote()->getQuoteCurrencyCode();
        $gatewaysList = $this->getGatewaysList($currency);
        $showLogoFlag = Mage::helper('bluepayment/gateways')->showGatewayLogo();
    ?>

    <h4 style="padding-top: 20px; padding-left: 30px;"><?php echo $this->__('Select payment method:'); /* Wybierz sposób płatności: */?></h4>
    <ul class="bluepayment-options-list" style="margin-left: 30px;">
        <?php foreach ($gatewaysList as $gateway): ?>
            <?php $gatewayId = $gateway->getData('gateway_id'); ?>
            <?php $gatewayName = $gateway->getName(); ?>

            <li class="bluepayment-option">
                <div class="bluepayment-input">
                    <input id="p_method_bluepayment_gateway_<?php echo $gatewayId; ?>"
                           type="radio"
                           value="<?php echo $gatewayId; ?>"
                           name="payment_method_bluepayment_gateway"
                           title="<?php echo $gatewayName; ?>"
                           required
                           class="validate-one-required-by-name"
                    />
                    <label for="p_method_bluepayment_gateway_<?php echo $gatewayId; ?>">
                        <?php if ($showLogoFlag): ?>
                            <?php if ($gateway->getData('use_own_logo')): ?>
                                <?php
                                $logoPath = $gateway->getData('gateway_logo_path');
                                if ($logoPath && $logoPath != ''):
                                    $ownLogoUrl = Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA)
                                        . $logoPath;
                                    ?>
                                    <img src="<?php echo $ownLogoUrl; ?>"
                                         alt="<?php echo $gatewayName; ?>" style="height: 40px; vertical-align:middle;">
                                <?php endif; ?>
                            <?php else: ?>
                                <img src="<?php echo $gateway->getData('gateway_logo_url'); ?>"
                                     alt="<?php echo $gatewayName; ?>" style="height: 40px; vertical-align:middle;">

                            <?php endif; ?>
                        <?php endif; ?>
                        <span style="line-height: 40px;">
                            <?php echo $gatewayName; ?>
                        </span>
                    </label>

                    <span> <?php $gateway->getData('gateway_description'); ?></span>
                </div>
            </li>
        <?php endforeach; ?>
    </ul>
</div>
<script>
    //<![CDATA[
    var $gateways = jQuery('#p_method_bluepayment_gateway');

    jQuery(document).ready(function () {
        $interval = setInterval(function () {
            jQuery('#p_method_bluepayment_gateway').find('input').each(function () {
                jQuery(this).removeAttr('disabled');
            });
        }, 50);
        setTimeout(function () {
            clearInterval($interval);
        }, 1000);

        var $bluepaymentInput = jQuery('#p_method_bluepayment');
        if ($bluepaymentInput.length) {
            setDefauleDisplayGateways($bluepaymentInput);

            jQuery('input[name="payment[method]"]').change(function () {
                if (jQuery(this).val() === 'bluepayment') {
                    showGateways();
                } else {
                    hideGateways();
                }
            });
        }

        if (jQuery('[name="payment[method]"].gpay').length > 0) {
            var gpay = new GPay();
            gpay.init();
        }
    });

    function setDefauleDisplayGateways(input) {
        if ($gateways.length) {
            $gateways.find('input[type="radio"]').each(function () {
                jQuery(this).prop('disabled', false);
            });
            if (input.is(':checked')) {
                $gateways.show();
            } else {
                $gateways.hide();
            }
        }
    }

    function showGateways() {
        if ($gateways.length) {
            $gateways.find('input[type="radio"]').each(function () {
                jQuery(this).prop('disabled', false);
            });
            $gateways.show();
        }
    }
    function hideGateways() {
        if ($gateways.length) {
            $gateways.hide();
        }
    }

    function GPay() {
        this.gPayClient = null;
        this.gPayMerchantInfo = null;
        this.gPayAcceptorId = null;
        this.testMode = null;
        this.merchantInfoUrl = "<?php echo $this->getUrl('checkout/onepage/gpay/'); ?>";
        this.total = null;
        this.currency = null;

        this.init = function() {
            this.wrapPayment();
            this.initializeClient();
        };

        this.wrapPayment = function() {
            var self = this;

            Payment.prototype.save = Payment.prototype.save.wrap(function(save) {
                var validator = new Validation(this.form);

                if (this.validate() && validator.validate()) {
                    if (jQuery('#p_method_' + this.currentMethod).hasClass('gpay')) {
                        self.gPayClient.loadPaymentData(self.getGPayTransactionData()).then(function (data) {
                            var token = data.paymentMethodData.tokenizationData.token;

                            jQuery('[name="gpay_token"]').val(token);
                            save();
                        })
                        .catch(function (errorMessage) {
                            console.error(errorMessage);
                        });
                    } else {
                        save();
                    }
                }
            });
        };

        this.initializeClient = function() {
            var self = this;

            jQuery.getJSON(this.merchantInfoUrl, function(data) {
                self.testMode = data.testMode === "1";
                self.gPayAcceptorId = data.acceptorId;
                self.gPayMerchantInfo = data.merchantInfo;
                self.total = data.total;
                self.currency = data.currency;

                self.gPayClient = new google.payments.api.PaymentsClient({
                    environment: self.testMode ? 'TEST' : 'PRODUCTION'
                });

                self.gPayClient.isReadyToPay({
                    apiVersion: 2,
                    apiVersionMinor: 0,
                    merchantInfo: self.gPayMerchantInfo,
                    allowedPaymentMethods: [
                        {
                            type: "CARD",
                            parameters: {
                                allowedAuthMethods: ["PAN_ONLY", "CRYPTOGRAM_3DS"],
                                allowedCardNetworks: [/*"AMEX", "DISCOVER", "JCB", */"MASTERCARD", "VISA"]
                            }
                        }
                    ]
                })
                    .then(function (response) {
                        var transactionData = self.getGPayTransactionData();

                        transactionData.transactionInfo.totalPriceStatus = 'NOT_CURRENTLY_KNOWN';

                        if (response.result) {
                            self.gPayClient.prefetchPaymentData(transactionData);
                            self.gPayClient.createButton({onClick: function () {}});
                        } else {
                            console.error(response);
                        }
                    })
                    .catch(function (errorMessage) {
                        console.error(response);
                    });
            });
        };

        this.getGPayTransactionData = function() {
            return {
                apiVersion: 2,
                apiVersionMinor: 0,
                merchantInfo: this.merchantInfo,
                allowedPaymentMethods: [
                    {
                        type: 'CARD',
                        parameters: {
                            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],
                            allowedCardNetworks: [/*"AMEX", "DISCOVER", "JCB", */"MASTERCARD", "VISA"]
                        },
                        tokenizationSpecification: {
                            type: 'PAYMENT_GATEWAY',
                            parameters: {
                                'gateway': 'bluemedia',
                                'gatewayMerchantId': this.gPayAcceptorId
                            }
                        }
                    }
                ],
                shippingAddressRequired: false,
                transactionInfo: {
                    totalPriceStatus: 'FINAL',
                    totalPrice: parseFloat(this.total).toFixed(2).toString(),
                    currencyCode: this.currency.toString()
                },
            };
        };
    }

    //]]>
</script>